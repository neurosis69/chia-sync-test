---
# Write header for logfile
- name: "Test {{ TESTCASE }} start: {{ DESCRIPTION }}"
  ansible.builtin.lineinfile:
    path: "{{ ANSIBLE_LOG_FILE_PATH }}/{{ ANSIBLE_LOG_FILE_NAME }}.csv"
    line: "{{ ansible_hostname }},{{ SCENARIO }},{{ TESTCASE }},{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S') }}"
- name: "Stop all chia processes"
  ignore_errors: yes
  ansible.builtin.shell: |
    . {{ CHIA_SW_PATH }}/activate && chia stop all -d
- name: "Remove old sqlite db files (including shm + wal + journal)"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ BLOCKCHAIN_DB_PATH }}/simulation_{{ BLOCKCHAIN_DB_NAME }}"
    - "{{ BLOCKCHAIN_DB_PATH }}/simulation_{{ BLOCKCHAIN_DB_NAME }}-shm"
    - "{{ BLOCKCHAIN_DB_PATH }}/simulation_{{ BLOCKCHAIN_DB_NAME }}-wal"
    - "{{ BLOCKCHAIN_DB_PATH }}/simulation_{{ BLOCKCHAIN_DB_NAME }}-journal"
- name: "Copy extracted sqlite db file {{ DB_BACKUP }} to {{ BLOCKCHAIN_DB_NAME }}"
  ansible.builtin.command: "cp {{ BLOCKCHAIN_DB_PATH }}/{{ DB_BACKUP }} {{ BLOCKCHAIN_DB_PATH }}/simulation_{{ BLOCKCHAIN_DB_NAME }}"
- name: "Setup chia using branch for given testcase"
  include_role:
    name: setup_chia
- name: "Create plots and generate chain"
  ignore_errors: yes
  ansible.builtin.shell: |
    . {{ CHIA_SW_PATH }}/activate && python {{ CHIA_SW_PATH }}/tools/generate_chain.py --length 500 --fill-rate 100 --output "{{ BLOCKCHAIN_DB_PATH }}/simulation_{{ BLOCKCHAIN_DB_NAME }}"
  args:
    chdir: "{{ BLOCKCHAIN_DB_PATH }}"
- name: "Clear FS Caches to get comparable runtimes"
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.shell: |
    sync; echo 3 > /proc/sys/vm/drop_caches
- name: "Write Log: {{ TESTCASE }} initiate sync"
  ansible.builtin.lineinfile:
    path: "{{ ANSIBLE_LOG_FILE_PATH }}/{{ ANSIBLE_LOG_FILE_NAME }}.csv"
    regexp: "^({{ ansible_hostname }},{{ SCENARIO }},{{ TESTCASE }}.*)$"
    line: "\\1,{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S') }}"
    backrefs: yes
- name: "Start full sync simulation"
  async: 86400
  poll: 0
  ansible.builtin.shell: |
    . {{ CHIA_SW_PATH }}/activate && python {{ CHIA_SW_PATH }}/tools/test_full_sync.py run --test-constants "{{ BLOCKCHAIN_DB_PATH }}/simulation_{{ BLOCKCHAIN_DB_NAME }}"
  args:
    chdir: "{{ ANSIBLE_LOG_CHIA_PATH }}"
- name: "Tail chia logfile to prevent trigger wait_for for old log entries"
  ansible.builtin.shell: |
    tail -n 1 {{ ANSIBLE_LOG_CHIA_PATH }}/test-full-sync.log
  register: tail_debug_log
- name: "Set fact for tail"
  ansible.builtin.set_fact:
    debug_log_since_test_start: "{{ tail_debug_log.stdout }}"
- name: "Write Log: {{ TESTCASE }} simulated sync"
  ansible.builtin.lineinfile:
    path: "{{ ANSIBLE_LOG_FILE_PATH }}/{{ ANSIBLE_LOG_FILE_NAME }}.csv"
    regexp: "^({{ ansible_hostname }},{{ SCENARIO }},{{ TESTCASE }}.*)$"
    line: "\\1,{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S') }}"
    backrefs: yes
- name: "Write Log: {{ TESTCASE }} simulated start"
  ansible.builtin.lineinfile:
    path: "{{ ANSIBLE_LOG_FILE_PATH }}/{{ ANSIBLE_LOG_FILE_NAME }}.csv"
    regexp: "^({{ ansible_hostname }},{{ SCENARIO }},{{ TESTCASE }}.*)$"
    line: "\\1,{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S') }}"
    backrefs: yes
- name: "Sync until 'test completed' is reached"
  ansible.builtin.wait_for:
    path: "{{ ANSIBLE_LOG_CHIA_PATH }}/test-full-sync.log"
    search_regex: "{{ debug_log_since_test_start }}\r(.*\r)*.*test completed.*"
    timeout: 7200
- name: "Write Log: {{ TESTCASE }} simulated end"
  ansible.builtin.lineinfile:
    path: "{{ ANSIBLE_LOG_FILE_PATH }}/{{ ANSIBLE_LOG_FILE_NAME }}.csv"
    regexp: "^({{ ansible_hostname }},{{ SCENARIO }},{{ TESTCASE }}.*)$"
    line: "\\1,{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S') }}"
    backrefs: yes
- name: "Stop chia processes"
  ansible.builtin.shell: |
    . {{ CHIA_SW_PATH }}/activate && chia stop all -d
- name: "Get Simulation Run Time"
  ansible.builtin.shell: |
    grep duration {{ ANSIBLE_LOG_CHIA_PATH }}/test-full-sync.log | awk '{print $3}'
  register: simulation_run_time
- name: "Write Log: {{ TESTCASE }} write sqlite db size"
  ansible.builtin.lineinfile:
    path: "{{ ANSIBLE_LOG_FILE_PATH }}/{{ ANSIBLE_LOG_FILE_NAME }}.csv"
    regexp: "^({{ ansible_hostname }},{{ SCENARIO }},{{ TESTCASE }}.*)$"
    line: "\\1,{{ simulation_run_time }},\"{{ DESCRIPTION }}\""
    backrefs: yes
- name: "Move logfile to non-standard name"
  ansible.builtin.command: "mv {{ ANSIBLE_LOG_CHIA_PATH }}/test-full-sync.log {{ ANSIBLE_LOG_CHIA_PATH }}/{{ CHIA_LOG_FILE_NAME }}_{{ TESTCASE }}.{{ ansible_loop.index }}.log"
