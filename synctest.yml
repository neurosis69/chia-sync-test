---
- hosts: localhost
  gather_facts: true
  vars:
    # User
    CHIA_OS_USER: "chia"
    CHIA_OS_GROUP: "chia"
    # Git
    CHIA_GIT_REPO: "https://github.com/Chia-Network/chia-blockchain.git"
    CHIA_BRANCH: "1.2.11"
    # Testcases
    #SCENARIO: "TRANSACTION_START"
    SCENARIO: "DUSTSTORM1"
    #SCENARIO: "DUSTSTORM2"
    #SCENARIO: "TRANSACTION_PEAK"
    # Read Test Scenario Config
    BENCHMARK_CONFIG: "{{ lookup('file', 'testcases.json') | from_json }}"
    # SAR
    SADC_BIN_PATH: "/usr/lib64/sa"
    # DB
    BLOCKCHAIN_DB_NAME: "blockchain_v1_mainnet.sqlite"
    # Paths
    OS_USER_HOME: "/home/{{ CHIA_OS_USER }}"
      #BLOCKCHAIN_DB_PATH: "/chia_temp1/Blockchain_DB"
    BLOCKCHAIN_DB_PATH: "/ramdisk"
    CHIA_SW_PATH: "{{ OS_USER_HOME }}/chia-blockchain"
    ANSIBLE_HOME_PATH: "{{ OS_USER_HOME }}/chia-sync-test"
    ANSIBLE_LOG_PATH: "{{ ANSIBLE_HOME_PATH }}/log"
  vars_prompt:
    - name: ansible_become_pass
      prompt: "Enter sudo password"
      confirm: yes
      private: yes
  pre_tasks:
    - name: "Get timestamp for execution"
      ansible.builtin.shell: |
        date +%Y-%m-%d_%H:%M:%S
      register: timestamp_started
    - name: "Set Active Testcases"
      ansible.builtin.set_fact:
        ACTIVE_TESTCASES: "{{ BENCHMARK_CONFIG.ACTIVE_TESTCASES }}"
    - name: "Set Test Scenario Variables" 
      ansible.builtin.set_fact:
        DB_BACKUP: "{{ BENCHMARK_CONFIG.SCENARIO[SCENARIO].DB_BACKUP_NAME }}"
        DB_BACKUP_URL: "{{ BENCHMARK_CONFIG.SCENARIO[SCENARIO].DB_BACKUP_URL }}"
        SYNC_START_HEIGHT: "{{ BENCHMARK_CONFIG.SCENARIO[SCENARIO].SYNC_START_HEIGHT }}" 
        DUST_START_HEIGHT: "{{ BENCHMARK_CONFIG.SCENARIO[SCENARIO].DUST_START_HEIGHT }}"
        DUST_STOP_HEIGHT: "{{ BENCHMARK_CONFIG.SCENARIO[SCENARIO].DUST_STOP_HEIGHT }}"
    - name: "Set Log File Path variable as fact before using for other assignments"
      ansible.builtin.set_fact:
        ANSIBLE_LOG_FILE_PATH: "{{ ANSIBLE_LOG_PATH }}/{{ timestamp_started.stdout }}"
    - name: "Set Logfiles paths/names"
      ansible.builtin.set_fact:
        ANSIBLE_LOG_FILE_NAME: "{{ ansible_hostname }}_ansible_run"
        ANSIBLE_LOG_SA_PATH: "{{ ANSIBLE_LOG_FILE_PATH }}/sa"
        ANSIBLE_LOG_CHIA_PATH: "{{ ANSIBLE_LOG_FILE_PATH }}/chia"
        CHIA_LOG_FILE_NAME: "{{ ansible_hostname }}_chia_debug"
    - name: "Create Log Directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ ANSIBLE_LOG_PATH }}"
        - "{{ ANSIBLE_LOG_FILE_PATH }}"
        - "{{ ANSIBLE_LOG_SA_PATH }}"
        - "{{ ANSIBLE_LOG_CHIA_PATH }}"
    - name: "Cleanup old link to log directory"
      ansible.builtin.file:
        path: "{{ ANSIBLE_LOG_PATH }}/current"
        state: absent
    - name: "Create Link to current log directory"
      ansible.builtin.file:
        src: "{{ ANSIBLE_LOG_FILE_PATH }}"
        dest: "{{ ANSIBLE_LOG_PATH }}/current"
        state: link
    - name: "Write logfile header"
      ansible.builtin.lineinfile:
        path: "{{ ANSIBLE_LOG_FILE_PATH }}/{{ ANSIBLE_LOG_FILE_NAME }}.csv"
        line: "HOSTNAME,SCENARIO,TESTCASE,START_RUN,LOG_INITIATE_SYNC,LOG_START_SYNC,LOG_DUST_START_SYNC,LOG_DUST_STOP_SYNC,SQLITE_DB_SIZE_BYTES,DESCRIPTION"
        create: yes
    - name: "Check if extracted sqlite db file for scenario {{ SCENARIO }} already exists"
      ansible.builtin.stat:
        path: "{{ BLOCKCHAIN_DB_PATH }}/{{ DB_BACKUP }}"
        get_checksum: no
        get_mime: no
      register: db_backup_already_extracted
    - name: "Extract sqlite db file for scenario {{ SCENARIO }}"
      ansible.builtin.unarchive:
        src: "{{ DB_BACKUP_URL }}"
        dest: "{{ BLOCKCHAIN_DB_PATH }}"
        remote_src: yes
      when: not db_backup_already_extracted.stat.exists 
  roles:
    - { role: setup_chia }
    - { role: run_sync_tests_for_active_testcases }
